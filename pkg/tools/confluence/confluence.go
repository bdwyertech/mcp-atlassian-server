package confluence

import (
	"mcp-atlassian-server/pkg/handlers/confluence"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

func AddTools(s *server.MCPServer) {
	s.AddTool(mcp.NewTool("confluence_ping",
		mcp.WithDescription("Ping Confluence API"),
	), confluence.PingHandler)

	s.AddTool(mcp.NewTool("confluence_search",
		mcp.WithDescription("Search Confluence content using simple terms or CQL"),
		mcp.WithString("query",
			mcp.Description("Search query - can be either a simple text or a CQL query string."),
			mcp.Required(),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results (1-50)"),
			mcp.DefaultNumber(10),
		),
		mcp.WithString("spaces_filter",
			mcp.Description("(Optional) Comma-separated list of space keys to filter results by."),
			mcp.DefaultString(""),
		),
	), confluence.SearchHandler)

	s.AddTool(mcp.NewTool("confluence_get_page",
		mcp.WithDescription("Get content of a specific Confluence page by its ID, or by its title and space key."),
		mcp.WithString("page_id",
			mcp.Description("Confluence page ID (numeric ID, can be found in the page URL). Provide this OR both 'title' and 'space_key'. If page_id is provided, title and space_key will be ignored."),
			mcp.DefaultString(""),
		),
		mcp.WithString("title",
			mcp.Description("The exact title of the Confluence page. Use this with 'space_key' if 'page_id' is not known."),
			mcp.DefaultString(""),
		),
		mcp.WithString("space_key",
			mcp.Description("The key of the Confluence space where the page resides (e.g., 'DEV', 'TEAM'). Required if using 'title'."),
			mcp.DefaultString(""),
		),
		mcp.WithBoolean("include_metadata",
			mcp.Description("Whether to include page metadata such as creation date, last update, version, and labels."),
			mcp.DefaultBool(true),
		),
		mcp.WithBoolean("convert_to_markdown",
			mcp.Description("Whether to convert page to markdown (true) or keep it in raw HTML format (false)."),
			mcp.DefaultBool(true),
		),
	), confluence.GetPageHandler)

	s.AddTool(mcp.NewTool("confluence_get_page_children",
		mcp.WithDescription("Get child pages of a specific Confluence page."),
		mcp.WithString("parent_id",
			mcp.Description("The ID of the parent page whose children you want to retrieve"),
			mcp.Required(),
		),
		mcp.WithString("expand",
			mcp.Description("Fields to expand in the response (e.g., 'version', 'body.storage')"),
			mcp.DefaultString("version"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of child pages to return (1-50)"),
			mcp.DefaultNumber(25),
		),
		mcp.WithBoolean("include_content",
			mcp.Description("Whether to include the page content in the response"),
			mcp.DefaultBool(false),
		),
		mcp.WithBoolean("convert_to_markdown",
			mcp.Description("Whether to convert page content to markdown (true) or keep it in raw HTML format (false). Only relevant if include_content is true."),
			mcp.DefaultBool(true),
		),
		mcp.WithNumber("start",
			mcp.Description("Starting index for pagination (0-based)"),
			mcp.DefaultNumber(0),
		),
	), confluence.GetPageChildrenHandler)

	s.AddTool(mcp.NewTool("confluence_get_comments",
		mcp.WithDescription("Get comments for a specific Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("Confluence page ID (numeric ID, can be parsed from URL)"),
			mcp.Required(),
		),
	), confluence.GetCommentsHandler)

	s.AddTool(mcp.NewTool("confluence_get_labels",
		mcp.WithDescription("Get labels for a specific Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("Confluence page ID (numeric ID, can be parsed from URL)"),
			mcp.Required(),
		),
	), confluence.GetLabelsHandler)

	s.AddTool(mcp.NewTool("confluence_add_label",
		mcp.WithDescription("Add label to an existing Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("The ID of the page to update"),
			mcp.Required(),
		),
		mcp.WithString("name",
			mcp.Description("The name of the label"),
			mcp.Required(),
		),
	), confluence.AddLabelHandler)

	s.AddTool(mcp.NewTool("confluence_create_page",
		mcp.WithDescription("Create a new Confluence page."),
		mcp.WithString("space_key",
			mcp.Description("The key of the space to create the page in (usually a short uppercase code like 'DEV', 'TEAM', or 'DOC')"),
			mcp.Required(),
		),
		mcp.WithString("title",
			mcp.Description("The title of the page"),
			mcp.Required(),
		),
		mcp.WithString("content",
			mcp.Description("The content of the page in Markdown format. Supports headings, lists, tables, code blocks, and other Markdown syntax"),
			mcp.Required(),
		),
		mcp.WithString("parent_id",
			mcp.Description("(Optional) parent page ID. If provided, this page will be created as a child of the specified page"),
			mcp.DefaultString(""),
		),
	), confluence.CreatePageHandler)

	s.AddTool(mcp.NewTool("confluence_update_page",
		mcp.WithDescription("Update an existing Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("The ID of the page to update"),
			mcp.Required(),
		),
		mcp.WithString("title",
			mcp.Description("The new title of the page"),
			mcp.Required(),
		),
		mcp.WithString("content",
			mcp.Description("The new content of the page in Markdown format"),
			mcp.Required(),
		),
		mcp.WithBoolean("is_minor_edit",
			mcp.Description("Whether this is a minor edit"),
			mcp.DefaultBool(false),
		),
		mcp.WithString("version_comment",
			mcp.Description("Optional comment for this version"),
			mcp.DefaultString(""),
		),
		mcp.WithString("parent_id",
			mcp.Description("Optional new parent page ID"),
			mcp.DefaultString(""),
		),
	), confluence.UpdatePageHandler)

	s.AddTool(mcp.NewTool("confluence_delete_page",
		mcp.WithDescription("Delete an existing Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("The ID of the page to delete"),
			mcp.Required(),
		),
	), confluence.DeletePageHandler)

	s.AddTool(mcp.NewTool("confluence_add_comment",
		mcp.WithDescription("Add a comment to a Confluence page."),
		mcp.WithString("page_id",
			mcp.Description("The ID of the page to add a comment to"),
			mcp.Required(),
		),
		mcp.WithString("content",
			mcp.Description("The comment content in HTML (Confluence) format"),
			mcp.Required(),
		),
	), confluence.AddCommentHandler)
}
